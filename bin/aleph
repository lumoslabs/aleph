#!/usr/bin/env ruby
require 'highline/import'
require 'optparse'
Dir["#{File.dirname(__FILE__)}/executables/**/*.rb"].each { |f| load(f) }

class CommandParser
  COMMANDS = %w(run playground deps import_env_variables seed_playground_db setup_db).freeze
  attr_reader :command, :options, :banner

  def initialize
    @options = {}
    @banner = 'Usage: aleph <command> [-c|--config-path CONFIG_PATH] [-re|--rails-env RAILS_ENV] [-de|--dotenv DOTENV_FILE]'

    @op = OptionParser.new do |opts|
      opts.banner = @banner

      opts.on('-re', '--rails-env RAILS_ENV', 'Specify a rails env') do |re|
        @options[:rails_env] = re
      end

      opts.on('-de', '--dotenv DOTENV_FILE', 'Specify a dotenv file') do |de|
        @options[:dotenv] = de
      end

      opts.on('-c', '--config-path CONFIG_PATH', 'Path to the folder which contains your configuration files') do |c|
        @options[:config_path]  = c
      end

      opts.on('-h', '--help', 'Ask for help') do |h|
        @need_help = h
      end
    end
  end

  def parse!
    @op.parse!
    @command = ARGV[0]

    AlephExecutables::Utils.inform("Acceptable commands are #{COMMANDS.inspect}", @op.banner) if @need_help
    AlephExecutables::Utils.fail("Missing command. Acceptable commands are #{COMMANDS.inspect}", @op.banner) unless @command
    AlephExecutables::Utils.fail("Not a valid command. Acceptable commands are #{COMMANDS.inspect}", @op.banner) unless COMMANDS.include?(@command)
  end
end

class Commander
  def self.run!(command, options = {})
    klass = Object.const_get("::AlephExecutables::#{command.split('_').collect(&:capitalize).join}")
    klass.new(options).execute!
  end
end

spec = Gem::Specification.find_by_name('Aleph')
GEM_ROOT = spec.gem_dir
Dir.chdir GEM_ROOT

cp = CommandParser.new
cp.parse!
Commander.run!(cp.command, cp.options.merge(banner: cp.banner))
